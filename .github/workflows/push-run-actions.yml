name: Build
on:
  push:
    branches:
      - run-actions
permissions:
  contents: write
jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-2025
          - macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install llvm-dev libwayland-dev libxkbcommon-dev libx11-xcb-dev libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev liblldb-dev libgl1-mesa-dev
        shell: bash

      - name: Install Dependencies on macOS
        if: runner.os == 'macOS'
        run: |
          brew install llvm
        shell: bash

      - name: Download LLVM 20.1.7 archive
        if: runner.os == 'Windows'
        run: |
          echo "Downloading LLVM with curl..."
          curl -L -# -o clang_llvm.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.7/clang+llvm-20.1.7-x86_64-pc-windows-msvc.tar.xz
        shell: bash

      - name: Extract tar.xz to temp directory
        if: runner.os == 'Windows'
        run: |
          mkdir llvm_temp
          tar -xf clang_llvm.tar.xz -C llvm_temp
        shell: bash

      - name: Move extracted LLVM to C:\llvm
        if: runner.os == 'Windows'
        run: |
          $extracted = Get-ChildItem llvm_temp | Select-Object -First 1
          Move-Item "llvm_temp\$($extracted.Name)" C:\llvm
        shell: powershell

      - name: Verify LLVM location
        if: runner.os == 'Windows'
        run: dir C:\llvm\bin
        shell: powershell

      - name: Build Package on Linux
        if: runner.os == 'Linux'
        run: |
          cmake -G Ninja -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++
          cmake --build build --config Release
          cpack --config build/CPackConfig.cmake
        shell: bash

      - name: Build Package on macOS
        if: runner.os == 'macOS'
        run: |
          cmake -G Ninja -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ "-DLLVM_DIR=$(brew --prefix llvm)/lib/cmake/llvm"
          cmake --build build --config Release
          cpack --config build/CPackConfig.cmake
        shell: bash

      - name: Build Package on Windows
        if: runner.os == 'Windows'
        run: |
          cmake -G Ninja -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ "-DLLVM_DIR=C:/llvm/lib/cmake/llvm"
          cmake --build build --config Release
          cpack --config build/CPackConfig.cmake
        shell: cmd

      - name: Upload artifacts
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          path: lldb-frontend-darwin.tar.gz

      - name: Upload artifacts
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          path: lldb-frontend-windows.tar.gz

      - name: Upload artifacts
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          path: lldb-frontend-linux.tar.gz